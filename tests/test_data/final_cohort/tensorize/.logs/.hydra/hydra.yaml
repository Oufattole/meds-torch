hydra:
  run:
    dir: ${log_dir}
  sweep:
    dir: ${log_dir}
    subdir: ${hydra.job.num}
  launcher:
    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
  sweeper:
    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
    max_batch_size: null
    params: null
  help:
    app_name: MEDS/${stage}
    header: "${hydra.help.app_name} is powered by Hydra.

      "
    footer: "Powered by Hydra (https://hydra.cc)

      Use --hydra-help to view Hydra specific help

      "
    template: "== ${hydra.help.app_name} ==

      ${hydra.help.app_name} is a command line tool that provides an interface for
      running MEDS pipelines.


      **Pipeline description:**

      ${oc.select:description, ${_default_description}}


      **Stage description:**

      ${oc.select:stage_configs.${stage}.description, ${get_script_docstring:}}"
  hydra_help:
    template: "Hydra (${hydra.runtime.version})

      See https://hydra.cc for more info.


      == Flags ==

      $FLAGS_HELP


      == Configuration groups ==

      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
      to command line)


      $HYDRA_CONFIG_GROUPS


      Use '--cfg hydra' to Show the Hydra config.

      "
    hydra_help: ???
  hydra_logging:
    version: 1
    formatters:
      simple:
        format: "[%(asctime)s][HYDRA] %(message)s"
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
    root:
      level: INFO
      handlers:
        - console
    loggers:
      logging_example:
        level: DEBUG
    disable_existing_loggers: false
  job_logging:
    version: 1
    formatters:
      simple:
        format: "[%(asctime)s][%(name)s][%(levelname)s] - %(message)s"
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
      file:
        class: logging.FileHandler
        formatter: simple
        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
    root:
      level: INFO
      handlers:
        - console
        - file
    disable_existing_loggers: false
  env: {}
  mode: RUN
  searchpath: []
  callbacks: {}
  output_subdir: .hydra
  overrides:
    hydra:
      - hydra.mode=RUN
    task:
      - input_dir=/tmp/pytest-of-nassim/pytest-24/test_tokenize0/processed
      - cohort_dir=/tmp/pytest-of-nassim/pytest-24/test_tokenize0/processed/final_cohort
      - stage_configs.add_time_derived_measurements.age.DOB_code=DOB
  job:
    name: ${stage}_${worker}_${now:%Y-%m-%d_%H-%M-%S}
    chdir: null
    override_dirname: cohort_dir=/tmp/pytest-of-nassim/pytest-24/test_tokenize0/processed/final_cohort,input_dir=/tmp/pytest-of-nassim/pytest-24/test_tokenize0/processed,stage_configs.add_time_derived_measurements.age.DOB_code=DOB
    id: ???
    num: ???
    config_name: preprocess
    env_set: {}
    env_copy: []
    config:
      override_dirname:
        kv_sep: "="
        item_sep: ","
        exclude_keys: []
  runtime:
    version: 1.3.2
    version_base: "1.3"
    cwd: /home/nassim/projects/MEDS_polars_functions
    config_sources:
      - path: hydra.conf
        schema: pkg
        provider: hydra
      - path: /home/nassim/projects/MEDS_polars_functions/configs
        schema: file
        provider: main
      - path: ""
        schema: structured
        provider: schema
    output_dir: /tmp/pytest-of-nassim/pytest-24/test_tokenize0/processed/final_cohort/tensorize/.logs
    choices:
      hydra/env: default
      hydra/callbacks: null
      hydra/job_logging: default
      hydra/hydra_logging: default
      hydra/hydra_help: default
      hydra/help: default
      hydra/sweeper: basic
      hydra/launcher: basic
      hydra/output: default
  verbose: false
